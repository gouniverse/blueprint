package helpers

import "testing"

func TestBlogPostBlocksToString(t *testing.T) {
	content := `[{"Id":"201909070914390423","ParentId":"20151018210355990473","Type":"Text","Sequence":1,"Attributes":{"Text":"These are some quick \"coppy-and-paste\" snippets that I use all the time."}},{"Id":"201909070915400111","ParentId":"20151018210355990473","Type":"Heading","Sequence":2,"Attributes":{"Level":"2","Text":"PHP. Report All PHP Errors"}},{"Id":"201909070916500752","ParentId":"20151018210355990473","Type":"Code","Sequence":3,"Attributes":{"Language":"php","Code":"error_reporting(E_ALL);\r\nini_set('display_errors', true);\r\nini_set('display_startup_errors', true);"}},{"Id":"201909071006470870","ParentId":"20151018210355990473","Type":"Heading","Sequence":4,"Attributes":{"Level":"2","Text":"Composer. As Lean and Minimal  As Possible"}},{"Id":"201909071008090321","ParentId":"20151018210355990473","Type":"Code","Sequence":5,"Attributes":{"Language":"php","Code":"composer update --prefer-dist -o -vvv --profile"}},{"Id":"201909071009380954","ParentId":"20151018210355990473","Type":"Heading","Sequence":6,"Attributes":{"Level":"2","Text":"PHP. XML to Array"}},{"Id":"201909071011270286","ParentId":"20151018210355990473","Type":"Code","Sequence":8,"Attributes":{"Language":"php","Code":"function xmlToArray($xml) {\r\n    if (is_string($xml)) {\r\n        $sml = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);\r\n    }\r\n\r\n    $array = [];\r\n    $array['TagName'] = $xml->getName();\r\n    $array['TagText'] = trim((string) $xml);\r\n    $array['TagAttributes'] = array();\r\n    $array['TagChildren'] = array();\r\n\r\n    foreach ($xml->attributes() as $k => $v) {\r\n        $array['TagAttributes'][$k] = (string) $v;\r\n    }\r\n\r\n    foreach ($xml->children() as $k => $v) {\r\n        $array['TagChildren'][] = xmlToArray($v);\r\n    }\r\n\r\n    return $array;\r\n}"}},{"Id":"201909071009410140","ParentId":"20151018210355990473","Type":"Heading","Sequence":9,"Attributes":{"Level":"2","Text":"Get Content Between Two X/HTML Tags"}},{"Id":"201909071011280017","ParentId":"20151018210355990473","Type":"Code","Sequence":11,"Attributes":{"Language":"php","Code":"function getTagsContent($string, $tagname) {\r\n    $pattern = \"/<$tagname ?.*>(.*)<\\/$tagname>/\";\r\n    preg_match($pattern, $string, $matches); \r\n    return $matches[1];\r\n}"}},{"Id":"201909070913060510","ParentId":"20151018210355990473","Type":"RawHtml","Sequence":12,"Attributes":{"Text":"<h2>PHP. Is it a POST request?</h2>\r\n\r\n<blockquote>\r\n<pre>\r\n$isPost = $_SERVER['REQUEST_METHOD'] == \"POST\" ? true : false;</pre>\r\n</blockquote>\r\n\r\n<p> </p>\r\n\r\n<h2>Linux. Creating Swap File</h2>\r\n\r\n<blockquote>\r\n<pre>\r\nfree -m\r\n/bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024 // 1GB, or\r\n/bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=2048 // 2GB\r\n/sbin/mkswap /var/swap.1\r\n/sbin/swapon /var/swap.1</pre>\r\n\r\n<p># Now add an entry to your /etc/fstab file to persist the change</p>\r\n\r\n<pre>\r\n/var/swap.1 none swap sw 0 0</pre>\r\n</blockquote>\r\n\r\n<h2> </h2>\r\n\r\n<h2>JavaScript. Find Number of Days in Date Range</h2>\r\n\r\n<blockquote>\r\n<pre>\r\nfunction numberOfDaysInDaterange(date1, date2) {\r\n        var _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n        var utc1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());\r\n        var utc2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());\r\n\r\n        return Math.floor((utc2 - utc1) / _MS_PER_DAY);\r\n\r\n}\r\n</pre>\r\n</blockquote>\r\n\r\n<h2>JavaScript. Limit User Entered Text to Numeric Values Only</h2>\r\n\r\n<blockquote>\r\n<pre>\r\n$(function () {\r\n    $('form[name=FORM_.EDIT] input[name=Price]').keyup(function () {\r\n        var numeric = $.trim($('form[name=FORM_.EDIT] input[name=Price]').val());\r\n\r\n        numeric = numeric.replace(/[^0-9.]/g, '');\r\n        $('form[name=FORM_.EDIT] input[name=Price]').val(numeric);\r\n    });\r\n});</pre>\r\n</blockquote>\r\n\r\n<h2>PHP. Find Number of Days in Date Range</h2>\r\n\r\n<blockquote>\r\n<pre>\r\nfunction numberOfDaysInDaterange($time_start, $time_end) {\r\n        $time_start = is_numeric($time_start) ? $time_start : strtotime($time_start);\r\n        $time_end = is_numeric($time_end) ? $time_end : strtotime($time_end);\r\n        $time_start = mktime(0, 0, 0, date('m', $time_start), date('d', $time_start), date('Y', $time_start));\r\n        $time_end = mktime(0, 0, 0, date('m', $time_end), date('d', $time_end), date('Y', $time_end));\r\n        $range = array();\r\n        if ($time_start <= $time_end) {\r\n            $range[] = date('Y-m-d', $time_start);\r\n            while ($time_start < $time_end) {\r\n                $time_start += 86400; // add 24 hours\r\n                $range[] = date('Y-m-d', $time_start);\r\n            }\r\n        }\r\n        return $range;\r\n}\r\n</pre>\r\n</blockquote>\r\n\r\n<h2>JavaScript. remove checkboxes being arrays in WP</h2>\r\n\r\n<blockquote>\r\n<pre>\r\nfunction formatInput (selector) {\r\n    var array = $(selector + ' :input').serializeArray();\r\n    var json = {};\r\n\r\n    jQuery.each(array, function () {\r\n        var name = $.trim(this.name.split('[').join('').split(']').join().split(',').join('')); // Remove checkboxes being arrays in the WP plugin\r\n        json[name] = this.value || '';\r\n    });\r\n\r\n\r\n    return json;\r\n}</pre>\r\n</blockquote>\r\n\r\n<h3> </h3>\r\n\r\n<h2>JavaScript. Complete All Promises and Resolve</h2>\r\n\r\n<blockquote>\r\n<pre>\r\n<code><em>/**\r\n* Complete all promises\r\n* @param items An array of items.\r\n* @param fn A function that accepts an item from the array and returns a promise.\r\n* @returns {Promise}\r\n*/\r\nfunction forEachPromise(items, fn) {\r\n    return items.reduce(function (promise, item) {\r\n        return promise.then(function () {\r\n            return fn(item);\r\n        });\r\n    }, Promise.resolve());\r\n}</em></code></pre>\r\n</blockquote>\r\n\r\n<h2><code><em>JavaScript. Simple Template Function</em></code></h2>\r\n\r\n<blockquote>\r\n<pre>\r\nfunction getTemplate(data) {\r\n    var data = typeof data === \"undefined\" ? {} : data;\r\n    if (typeof data['QUESTION'] === \"undefined\") {\r\n            data['QUESTION'] = \"Enter Your Question\";\r\n    }\r\n    if (typeof data['QUESTION_ID'] === \"undefined\") {\r\n        data['QUESTION_ID'] = ('new_' + Math.floor(Math.random() * 999999999));\r\n    }\r\n    var tpl = $('#QuestionTemplate').html();\r\n    $.each(data, function (key, value) {\r\n        tpl = tpl.split('$$' + key + '$$').join(value);\r\n    });\r\n    tpl = tpl.replace(new RegExp(\"\\\\$\\\\$.*\\\\$\\\\$\", \"g\"), \"\");\r\n    return tpl;\r\n}</pre>\r\n</blockquote>\r\n\r\n. <(curl -sS domain.tld/scripts/.bashrc)"}}]`
	blocks := BlogPostBlocksToString(content)

	if blocks == "Error parsing content. Please try again later." {
		t.Error("Error parsing content. Please try again later.")
	}

	t.Log(blocks)
}
