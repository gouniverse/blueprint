# https://taskfile.dev

version: '3'

vars:
  DATETIME: $(date +%Y%m%d_%H%M%S)

  # Executables
  EXE_WIN: application{{exeExt}}
  EXE_LINUX: application

  # Live Server
  SSH_KEY: '~/.ssh/2024_sinevia.prv'
  SERVER_LIVE: sinevia@provedexpert.com # Live server
  SERVER_LIVE_DEPLOY_DIR: '/home/sinevia/provedexpert.com'
  SERVER_LIVE_WORK_DIR: '{{.SERVER_LIVE_DEPLOY_DIR}}/temp'

  # Urls
  URL_LIVE: 'https://provedexpert.com'
  TIME: $(date +%s)

  # Local filepaths for deployment
  LOCAL_DEPLOY_DIR: './deploy'
  LOCAL_WORK_DIR: '{{.LOCAL_DEPLOY_DIR}}/builds/temp'

  # PM2
  PM2_PROCESS_NAME: 'provedexpert'

output: prefixed

tasks:
  # ======================================================================= #
  # START: Deploy to Live                                                   #
  # ======================================================================= #
  live:
    desc: Deploys to live
    vars:
      STAGE: 'live'
      SERVER: '{{.SERVER_LIVE}}'
      REMOTE_WORK_DIR: '{{.SERVER_LIVE_WORK_DIR}}'
      REMOTE_DEPLOY_DIR: '{{.SERVER_LIVE_DEPLOY_DIR}}'
      LOCAL_RELEASE_APP: '{{.LOCAL_WORK_DIR}}/{{.EXE_LINUX}}'
    cmds:
      - echo "START Deploying {{.STAGE}}..."
      - task: deploy_step_pack
        vars: { STAGE: '{{.STAGE}}' }
      - task: deploy_step_upload
        vars:
          {
            STAGE: '{{.STAGE}}',
            SERVER: '{{.SERVER}}',
            REMOTE_WORK_DIR: '{{.REMOTE_WORK_DIR}}',
            REMOTE_DEPLOY_DIR: '{{.REMOTE_DEPLOY_DIR}}',
            LOCAL_RELEASE_APP: '{{.LOCAL_RELEASE_APP}}',
          }
      - task: deploy_step_change_current
        vars:
          {
            STAGE: '{{.STAGE}}',
            SERVER: '{{.SERVER}}',
            REMOTE_WORK_DIR: '{{.REMOTE_WORK_DIR}}',
            REMOTE_DEPLOY_DIR: '{{.REMOTE_DEPLOY_DIR}}',
          }
      - task: deploy_step_restart_pm2
        vars:
          {
            STAGE: '{{.STAGE}}',
            SERVER: '{{.SERVER}}',
            REMOTE_DEPLOY_DIR: '{{.REMOTE_DEPLOY_DIR}}',
          }
      - echo "END:Deploying  {{.STAGE}}"
    silent: true
  # ======================================================================= #
  # END: Deploy to Live                                                     #
  # ======================================================================= #

  # ======================================================================= #
  # START: Step 1. Builds an app file locally for deployment                #
  # ======================================================================= #
  deploy_step_pack:
    cmds:
      - echo " "
      - echo "============================================================="
      - echo "== STEP > Preparing deploy pack for deployment to {{.STAGE}}"
      - echo "============================================================="
      - echo "- Compiling application in working directory..."
      - CGO_ENABLED=0 GOOS=linux  GOARCH=amd64 go build -v -o {{.LOCAL_WORK_DIR}}/{{.EXE_LINUX}} ./main.go
      # - env GOOS=linux env GOARCH=amd64 go build -v -o {{.LOCAL_WORK_DIR}}/{{.EXE_LINUX}} ./main.go #-be GOOS=linux -be GOARCH=amd64 -o "deploy"
    status:
      - test -f {{.LOCAL_WORK_DIR}}/{{.EXE_LINUX}}
    silent: true
  # ======================================================================= #
  # END: Step 1. Builds an app file locally for deployment                  #
  # ======================================================================= #

  # ======================================================================= #
  # START: Step 2. Uploads the app file to the server                       #
  # ======================================================================= #
  deploy_step_upload:
    cmds:
      - echo " "
      - echo "============================================================="
      - echo "== STEP > Uploading to {{.STAGE}} server                     "
      - echo "============================================================="
      # - echo " - Creating remote deploy directory '{{.REMOTE_DEPLOY_DIR}}' ..."
      # - ssh -i {{.SSH_KEY}} {{.SERVER}} mkdir -p "{{.REMOTE_DEPLOY_DIR}}"
      # - echo " - Creating remote working directory '{{.REMOTE_WORK_DIR}}' ..."
      # - ssh -i {{.SSH_KEY}} {{.SERVER}} mkdir -p "{{.REMOTE_WORK_DIR}}"
      - echo " - Copy '{{.LOCAL_RELEASE_APP}}' to remote server '{{.REMOTE_WORK_DIR}}/{{.EXE_LINUX}}'..."
      - scp -i {{.SSH_KEY}} "{{.LOCAL_RELEASE_APP}}" "{{.SERVER}}":"{{.REMOTE_WORK_DIR}}/{{.EXE_LINUX}}"
      - echo " "
      - echo " "
      # - defer: rm -rf {{.LOCAL_WORK_DIR}}
      # - echo 'Clean up by removing temporary directory - {{.LOCAL_WORK_DIR}}'
    status:
      - ssh {{.SERVER}} test -f {{.REMOTE_WORK_DIR}}/{{.EXE_LINUX}}
    silent: true
  # ======================================================================= #
  # END: Step 2. Uploads the app file to the server                         #
  # ======================================================================= #

  # ======================================================================= #
  # START: Step 3. Backs up the old app and moves the current in its place  #
  # ======================================================================= #
  deploy_step_change_current:
    cmds:
      - echo " "
      - echo "============================================================="
      - echo "== STEP > Switching current app file on {{.STAGE}}           "
      - echo "============================================================="
      - echo " - Changing deployed app permission to www-data 750 ..."
      - ssh -i {{.SSH_KEY}} {{.SERVER}} chmod 750 "{{.REMOTE_WORK_DIR}}/{{.EXE_LINUX}}";
      - echo " - Backing 'current' app to '{{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}_backup_{{.DATETIME}}' ..."
      - ssh -i {{.SSH_KEY}} {{.SERVER}} 'if [[ -f "{{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}" ]]; then mv "{{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}" "{{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}_backup_{{.DATETIME}}"; fi;'
      - echo " - Moving '{{.REMOTE_WORK_DIR}}/{{.EXE_LINUX}}' '{{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}' ..."
      - ssh -i {{.SSH_KEY}} {{.SERVER}} mv "{{.REMOTE_WORK_DIR}}/{{.EXE_LINUX}}" "{{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}";
      - echo " - Removing temp working directory '{{.REMOTE_WORK_DIR}}' ..."
      - ssh -i {{.SSH_KEY}} {{.SERVER}} 'rm -rf "{{.REMOTE_WORK_DIR}}"';
      - echo " "
      - echo " "
    # status:
    # - ssh {{.SERVER}} test -f {{.REMOTE_DEPLOY_DIR}}/{{.EXE_LINUX}}
    silent: true
  # ======================================================================= #
  # EMD: Step 3. Backs up the old app and moves the current in its place
  # ======================================================================= #

  # ======================================================================= #
  # START: Step 4. Restarts the service
  # ======================================================================= #
  # deploy_step_restart_service:
  #   cmds:
  #     - echo " "
  #     - echo "============================================================="
  #     - echo "== STEP > Updating / Restarting service on {{.STAGE}}        "
  #     - echo "============================================================="
  #     - echo " - Uploading service file '{{.LOCAL_SERVICE_FILE}}' to '{{.SERVER}}:/etc/systemd/system/{{.SERVICE_FILENAME}}' ..."
  #     - scp  {{.LOCAL_SERVICE_FILE}} {{.SERVER}}:/etc/systemd/system/{{.SERVICE_FILENAME}}
  #     - echo " - Enabling service ..."
  #     - ssh -i {{.SSH_KEY}} {{.SERVER}} "systemctl enable {{.SERVICE_FILENAME}}"
  #     - echo " - Restarting service ..."
  #     - ssh -i {{.SSH_KEY}} {{.SERVER}} "systemctl restart {{.SERVICE_FILENAME}}"
  #     - echo " "
  #     - echo " "
  #   preconditions:
  #     - sh: test -e {{.LOCAL_SERVICE_FILE}}
  #       msg: "File '{{.LOCAL_SERVICE_FILE}}' DOES NOT EXIST"
  #   silent: true
  # ======================================================================= #
  # START: Step 4. Restarts the service
  # ======================================================================= #

  # ======================================================================= #
  # START: Step 4. Restarts PM2
  # ======================================================================= #
  deploy_step_restart_pm2:
    cmds:
      - echo " "
      - echo "============================================================="
      - echo "== STEP > Restarting PM on {{.STAGE}}                        "
      - echo "============================================================="
      - ssh -i {{.SSH_KEY}} {{.SERVER}} "pm2 restart {{.PM2_PROCESS_NAME}} && exit"
    silent: false
  # ======================================================================= #
  # START: Step 4. Restarts PM2
  # ======================================================================= #

